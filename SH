package com.starhealth.eps_communication_subscriber.service.impl; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.core.type.TypeReference; import com.fasterxml.jackson.databind.ObjectMapper; import com.google.gson.Gson; import com.google.gson.JsonElement; import com.google.gson.JsonObject; import com.starhealth.eps_communication_subscriber.exception.SubscriberInternalRetryException; import com.starhealth.eps_communication_subscriber.source_splitter.SubscriberSource; import com.starhealth.eps_communication_subscriber.source_splitter.SubscriberSourceFactory; import com.starhealth.eps_communication_subscriber.dto.SubscriberRequest; import com.starhealth.eps_communication_subscriber.service.CommunicationService; import com.starhealth.eps_communication_subscriber.util.RestTemplateUtil; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpMethod; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.util.*; @Service @Slf4j @Transactional public class CommunicationServiceImpl implements CommunicationService { @Value("${communication_hub.apiKey}") private String communicationHubApiKey; @Value("${communication_hub.url}") private String communicationHubUrl; @Value("${communication_hub.clientId}") private String communicationHubClientId; private RestTemplateUtil restTemplateUtil; private ObjectMapper objectMapper; private Gson gson; public CommunicationServiceImpl(RestTemplateUtil restTemplateUtil, ObjectMapper objectMapper, Gson gson) { this.restTemplateUtil = restTemplateUtil; this.objectMapper = objectMapper; this.gson = gson; } public boolean processMessage(String message) throws JsonProcessingException { SubscriberRequest subscriberRequest = objectMapper.readValue(message, new TypeReference<SubscriberRequest>() { }); SubscriberSource sourceRequest = SubscriberSourceFactory.getSourceRequest(subscriberRequest.getSource()); JsonObject payload = subscriberRequest.getPayload(); JsonObject cHubPayload = sourceRequest.adaptPayload(payload); // EventRequest eventRequest = gson.fromJson(cHubPayload, EventRequest.class); JsonObject cHubResponse = getResponse(cHubPayload); log.info("CommunicationHub Response {} ",cHubResponse); JsonElement response = cHubResponse.get("response"); if(Objects.nonNull(response) && response.getAsJsonObject().get("code") != null){ JsonElement code = response.getAsJsonObject().get("code"); if(code.toString().equalsIgnoreCase("200")){ return true; } } throw new SubscriberInternalRetryException(response); } public JsonObject getResponse(JsonObject cHUbRequest) throws JsonProcessingException { String eventId = UUID.randomUUID().toString(); cHUbRequest.addProperty("eventId", eventId); log.info("Inside the getResponse CommunicationHub Request {}", cHUbRequest); Map<String, String> headers = new HashMap<>(); headers.put("requestUUID", UUID.randomUUID().toString()); headers.put("apiKey", communicationHubApiKey); log.info("EventID {}, communicationHubUrl {}, communicationHubClientId{} , communicationHubApiKey{} ", eventId, communicationHubUrl, communicationHubClientId, communicationHubApiKey); ResponseEntity<String> response = restTemplateUtil.getResponse(communicationHubUrl, cHUbRequest, headers, HttpMethod.POST); log.info("EventId {} , communicationHub Response {}", eventId, response.getBody()); JsonObject hubResponse = objectMapper.readValue(response.getBody(), new TypeReference<JsonObject>() { }); return hubResponse; } }
